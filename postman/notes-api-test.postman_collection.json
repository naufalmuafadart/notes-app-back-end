{
	"info": {
		"_postman_id": "6f64aae3-b535-42b8-8245-a5c9ec6dd3d1",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25564463"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}:{{port}}/notes",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Contant-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes).lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}:{{port}}/notes",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain note object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.haveOwnProperty('note');\r",
							"    pm.expect(data.note).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('note object should contain correct value for id, title, body and tags property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { note } } = responseJson;\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A';\r",
							"    const expectedTags = ['Android', 'Web'];\r",
							"    const expectedBody = 'Isi dari catatan A';\r",
							"\r",
							"    pm.expect(note).to.haveOwnProperty('id');\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"\r",
							"    pm.expect(note).to.haveOwnProperty('title');\r",
							"    pm.expect(note.title).equals(expectedTitle);\r",
							"\r",
							"    pm.expect(note).to.haveOwnProperty('tags');\r",
							"    pm.expect(note.tags).eql(expectedTags);\r",
							"\r",
							"     pm.expect(note).to.haveOwnProperty('body');\r",
							"    pm.expect(note.body).equals(expectedBody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}:{{port}}/notes/{{noteId}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"\r",
							"pm.test('when request the updated note', () => {\r",
							"    const host = pm.environment.get('host');\r",
							"    const port = pm.environment.get('port');\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`${host}:${port}/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then the updated note should contain the latest data', () => {\r",
							"                const responseJson = response.json();\r",
							"                const { data: { note } } = responseJson;\r",
							" \r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							" \r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}:{{port}}/notes/{{noteId}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response should have status code of 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test('when request deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    const host = pm.environment.get('host');\r",
							"    const port = pm.environment.get('port');\r",
							"\r",
							"    pm.sendRequest(`${host}:${port}/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}:{{port}}/notes/{{noteId}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding Notes with Bad Note Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
							" \r",
							"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
							"    badNotePayloads = [\r",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
							"    ]\r",
							"}\r",
							" \r",
							"const currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.be.ok;\r",
							"});\r",
							"\r",
							"const repeatResponseUntilDatasetEmpty = () => {\r",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
							"\r",
							"    if (badNotePayloads && badNotePayloads.length > 0) {\r",
							"        postman.setNextRequest('Adding Notes with Bad Note Payloads');\r",
							"    }\r",
							"};\r",
							"\r",
							"repeatResponseUntilDatasetEmpty();\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}:{{port}}/notes",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note with Bad Note Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array\r",
							" \r",
							"if (!badNotePayloads || badNotePayloads.length === 0) {\r",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai\r",
							"    badNotePayloads = [\r",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },\r",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }\r",
							"    ]\r",
							"}\r",
							"\r",
							"const currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya\r",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));\r",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							" \r",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							" \r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							" \r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.message).to.be.ok;\r",
							"});\r",
							" \r",
							"const repeatRequestUntilDatasetEmpty = () => {\r",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');\r",
							" \r",
							"    if(badNotePayloads && badNotePayloads.length > 0) {\r",
							"        postman.setNextRequest('Update Note with Bad Note Payload');\r",
							"    }\r",
							"}\r",
							" \r",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}:{{port}}/notes/{{noteId}}",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}